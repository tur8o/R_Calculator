all(ints>0)
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
#x
}
submit()
> boring_function <- function(x) {
x
}
> submit()
boring_function <- function(x) {
x
}
submit(
submit()
boring_function <- function(x) {
x
}
boring_function <- function(x) {}
boring_function <- function(x) {x}
info()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
main()
info()
main()
bye()
swirl()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x)
{x}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function(1)
boring_function(10)
boring_function <- function(x)
boring_function <- function(x) {
x
}
submit()
skip()
boring_function('My first function!')
boring_function()
boring_function
my_mean <- function(x) {}
my_mean <- function(x) {
mean(x)
}
> submit()
my_mean <- function(my_vector) {
mean(x)
x
}
submit()
my_mean <- function(my_vector) {
average <- length(x)/sum(x)
average
}
> submit()
submit()
skip()
my_mean(c(4,5,10))
submit()
my_mean(c(7,5,10))
skip()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
remainder(args)
args(remainder)
submit()
robs_function <- remainder(11,5)
args(robs_function)
submit
submit()
skip()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){c(1)}, 6)
evaluate(function(x){c(1,)}, c(8,4,0))
evaluate(function(x){c(1)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){find <- length(x) x[find]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
paste("My", "name", "is", "Rob")
submit()
Rob <- function(...){
paste("START", ..., "STOP", sep = " ")
}
submit()
Rob <- function(...){
paste("START", ..., "STOP", sep = " ")
}
submit()
skip()
telegram(x)
submit()
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
skip()
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
"%p%" <- function(left, right){
paste(left, right, sep = " ")
}
submit()
"%p%" <- function(left, right){"Hello"
paste(left, right, sep = " ")
}
submit()
skip()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes <- flag_colors[19:23]
flag_shapes <- flags[19:23]
flag_shapes <- flags[,19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(flag_shapes)
flag_shapes <- data.matrix(flag_shapes)
shape_mat <- data.matrix(shape_mat)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, unique)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$animate, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
bye()
source('C:/Users/ROBERT~1.FAR/AppData/Local/Temp/RtmpeC53LQ/boring_function.R')
swirl()
library(swirl)
swirl()
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
rbinom(flips)
rbinom(0:1,100)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(0:1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100,25)
rnorm(10, mean = 100, sd = 25)
rlist(5)
rpois(5)
?rpois
rpois(5,lamda = 100)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unlass(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclas(d2)
unclass(d2)
t1 <- sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
ploat(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(y = cars$speed, x = cars$dist)
?plot
plot(y = cars$speed, x = cars$dist, xlab = "Speed"")
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, x = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", title = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(Use xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcarrs
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
addition <- function(x, y) {
return(x + y)
}
addition(1,2)
subtraction <- function(x, y) {
return(x - y)
}
subtraction(1,2)
division <- function(x, y) {
return(x / y)
}
division(1,2)
multiplication <- function(x, y) {
return(x * y)
}
multiplication(1,2)
power_of <- function(x,y) {
return(x^y)
}
power_of(3,4)
square_root <- function(x) {
square_root(16)
square_root <- function(x) {
y <- sqrt(x)
return(y)
}
square_root(16)
square_root(4)
sqrt(16)
sqrt(9)
division <- function(x,y) {
if(y == 0){ #cannot divide by zeror
return ("Error! Cannot divide by zero!")
} else {
return(x/y)
}
}
division(1,2)
division(10,0)
division <- function(x,y) {
if(y == 0){ #cannot divide by zeror
return ("Error! Cannot divide by zero!")
} else {
return(x/y)
}
}
division(1,2)
division(10,0)
square_root <-function(x) {
return (sqrt(x))
}
print (square_root(100))
square_root(4)
square_root(0)
square_root(-1)
square_root <-function(x) {
if(x < 0){ #cannot find square root of negative number
return ("Error! Number needs to be greater than or equal to zero!")
} else {
return (sqrt(x))
}
square_root(4)
square_root(0)
(4)
square_root(0)
square_root(-1)
square_root <-function(x) {
if(x < 0){ #cannot find square root of negative number
return ("Error! Number needs to be greater than or equal to zero!")
} else {
return (sqrt(x))
}
square_root(-1)
trig_tan <- function(x) {
if(x %% 180 ==0){
return (0)
} else if(x%% 90 ==0){
return ("Error!")
} else {
return (tan(x*pi/180))
}
}
trig_tan(5)
tan <- function(x) {
if(x %% 180 ==0){
return (0)
} else if(x%% 90 ==0){
return ("Error!")
} else {
return (tan(x*pi/180))
}
}
tan(5)
sin <- function(x) {
return(sin(x*pi/180))
}
sin(34)
cos <- function(x) {
return(cos(x*pi/180))
}
cos(76)
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
}
return(y)
}
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
}
return(y)
}
factorial(10)
exponent <- function(x,y) {
return(x^y)
}
exponent(3,4)
factorial(10)
cos(76)
sin(34)
tan(5)
square_root(4)
square_root(0)
square_root(-1)
square_root(0)
square_root <-function(x) {
if(x > 0){ #cannot find square root of negative number
return (sqrt(x))
} else {
return ("Error! Number needs to be greater than or equal to zero!")
}
square_root(4)
square_root <-function(x) {
if(x > 0){ #cannot find square root of negative number
return (sqrt(x))
} else {
return ("Error! Number needs to be greater than or equal to zero!")
}
square_root(4)
square_root(0)
square_root(-1)
source("calc_functions.R")
multiplication(1,2)
source("calc_functions.R")
?source
source("C:\Users\robert.farrell\Desktop\R Calculator\calc_functions.R")
getwd()
setwd("C:\Users\robert.farrell\Desktop\R Calculator")
source("C:/Users/robert.farrell/Desktop/R Calculator/calc_functions.R")
source("C:/Users/robert.farrell/Desktop/R Calculator/calc_functions.R")
source("C:/Users/robert.farrell/Desktop/R Calculator/calc_functions.R")
source("C:/Users/robert.farrell/Desktop/R Calculator/calc_functions.R")
source("C:/Users/robert.farrell/Desktop/R Calculator/calc_functions.R")
setwd("C:/Users/robert.farrell\Desktop\R Calculator")
setwd("C:/Users/robert.farrell/Desktop/R Calculator")
source("C:/Users/robert.farrell/Desktop/R Calculator/calc_functions.R")
source("calc_functions.R")
multiplication(1,2)
division(2,1)
sine <- function(x) {
return(sin(x*pi/180))
}
cosine <- function(x) {
return(cos(x*pi/180))
}
source("calc_functions.R")
addition(2,1)
addition(4,4)
addition(4,-12)
subtraction(3,1)
subtraction(-1,1)
subtraction(-12,0)
division(3,1)
division(1,3)
division(3,0)
division(4,5)
multiplication(3,3)
multiplication(4,3)
multiplication(3,6)
multiplication(3,-1)
exponent(1,3)
exponent(1,-1)
exponent(1,0)
exponent(3,4)
exponent <- function(x,y) {
return(x^y)
}
exponent(1,3)
exponent(1,-1)
exponent(1,0)
exponent(3,4)
square_root(4)
square_root(0)
square_root(-1)
square_root <-function(x) {
if(x >= 0){ #cannot find square root of negative number
return (sqrt(x))
} else {
return ("Error! Number needs to be greater than or equal to zero!")
}
square_root(4)
square_root(0)
square_root(-1)
square_root(4)
square_root(0)
square_root(-1)
